@page "/orders"
@using E_Commerce_FrontEnd.Models
@using E_Commerce_FrontEnd.Services
@inject IOrderService OrderService
@inject NavigationManager NavigationManager

<div class="container py-4">
    <div class="row">
        <div class="col-12">
            <h1 class="h3 mb-4">Siparişlerim</h1>

            @if (orders == null)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Yükleniyor...</span>
                    </div>
                </div>
            }
            else if (!orders.Any())
            {
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-box-seam display-1 text-muted mb-3"></i>
                        <h2 class="h4 mb-3">Henüz siparişiniz bulunmuyor</h2>
                        <p class="text-muted mb-4">
                            Alışverişe başlayarak ilk siparişinizi oluşturabilirsiniz.
                        </p>
                        <a href="/" class="btn btn-primary">
                            <i class="bi bi-shop me-2"></i>
                            Alışverişe Başla
                        </a>
                    </div>
                </div>
            }
            else
            {
                @foreach (var order in orders)
                {
                    <div class="card border-0 shadow-sm mb-4">
                        <div class="card-header bg-white border-0 py-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1">Sipariş No: @order.Id.ToString().Substring(0, 8)</h6>
                                    <small class="text-muted">
                                        @order.OrderDate.ToString("dd MMMM yyyy HH:mm")
                                    </small>
                                </div>
                                <div class="text-end">
                                    <span class="badge bg-@GetStatusColor(order.OrderStatus)">
                                        @order.OrderStatus
                                    </span>
                                    <div class="mt-1">
                                        <strong>@($"{order.TotalAmount:N2}") ₺</strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            @foreach (var detail in order.OrderDetails)
                            {
                                <div class="d-flex align-items-center py-2 @(detail != order.OrderDetails.Last() ? "border-bottom" : "")">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0">@detail.ProductName</h6>
                                        <small class="text-muted">
                                            @detail.Quantity adet x @($"{detail.UnitPrice:N2}") ₺
                                        </small>
                                    </div>
                                    <div class="text-end">
                                        <strong>@($"{detail.Quantity * detail.UnitPrice:N2}") ₺</strong>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<Order> orders;

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetMyOrders();
    }

    private string GetStatusColor(string status)
    {
        return status.ToLower() switch
        {
            "hazırlanıyor" => "warning",
            "işleniyor" => "info",
            "kargoda" => "primary",
            "teslim edildi" => "success",
            "iptal edildi" => "danger",
            _ => "secondary"
        };
    }
}

<style>
    .card {
        border-radius: 10px;
        transition: transform 0.2s;
    }

    .card:hover {
        transform: translateY(-2px);
    }

    .badge {
        padding: 0.5rem 1rem;
        border-radius: 20px;
    }
</style>