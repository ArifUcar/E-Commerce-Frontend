@page "/category/{CategoryId:guid}"
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@using E_Commerce_FrontEnd.Models
@using E_Commerce_FrontEnd.Services

<div class="container py-4">
    @if (category == null)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Yükleniyor...</span>
            </div>
        </div>
    }
    else
    {
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Ana Sayfa</a></li>
                <li class="breadcrumb-item active">@category.CategoryName</li>
            </ol>
        </nav>

        <h4 class="mb-4">@category.CategoryName</h4>

        @if (!products.Any())
        {
            <div class="alert alert-info">
                Bu kategoride henüz ürün bulunmamaktadır.
            </div>
        }
        else
        {
            <div class="row g-4">
                @foreach (var product in products)
                {
                    <div class="col-6 col-md-4 col-lg-3">
                        <div class="card h-100 border-0 shadow-sm product-card">
                            <div class="position-relative">
                                <img src="@(string.IsNullOrEmpty(product.Base64Image) ? 
                                    (string.IsNullOrEmpty(product.ImagePath) ? "images/no-image.jpg" : product.ImagePath) : 
                                    $"data:image/jpeg;base64,{product.Base64Image}")" 
                                     class="card-img-top product-image" alt="@product.ProductName">
                            </div>
                            <div class="card-body">
                                <h6 class="card-title mb-2">@product.ProductName</h6>
                                <p class="card-text text-muted small mb-2">@product.Description</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <span class="fw-bold text-primary">@product.Price.ToString("N2") ₺</span>
                                    </div>
                                    <div>
                                        <span class="badge bg-@(product.StockQuantity > 10 ? "success" : "danger")">
                                            Stok: @product.StockQuantity
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer bg-white border-0">
                                <button class="btn btn-primary w-100" 
                                        @onclick="() => NavigateToProduct(product.Id)">
                                    <i class="bi bi-eye me-2"></i>Ürünü İncele
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

<style>
    .product-card {
        transition: transform 0.2s;
    }

    .product-card:hover {
        transform: translateY(-5px);
    }

    .product-image {
        height: 200px;
        object-fit: cover;
    }

    .card-title {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .card-text {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }
</style>

@code {
    [Parameter]
    public Guid CategoryId { get; set; }

    private Category category;
    private List<Product> products = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (CategoryId != Guid.Empty)
        {
            category = await CategoryService.GetCategoryById(CategoryId);
            if (category != null)
            {
                products = await ProductService.GetProductsByCategory(CategoryId);
            }
        }
    }


    private void NavigateToProduct(Guid productId)
    {
        NavigationManager.NavigateTo($"/product/{productId}");
    }
} 