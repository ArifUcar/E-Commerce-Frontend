@page "/category/{CategoryId}"
@using E_Commerce_FrontEnd.Models
@using E_Commerce_FrontEnd.Services
@inject ICategoryService CategoryService
@inject IProductService ProductService
@inject ICartService CartService

<div class="container py-5">
    @if (category == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Yükleniyor...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col">
                <h2 class="display-6 fw-bold">@category.CategoryName</h2>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Ana Sayfa</a></li>
                        <li class="breadcrumb-item active">@category.CategoryName</li>
                    </ol>
                </nav>
            </div>
        </div>

        @if (products == null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Ürünler yükleniyor...</span>
                </div>
            </div>
        }
        else if (!products.Any())
        {
            <div class="alert alert-info">
                Bu kategoride henüz ürün bulunmamaktadır.
            </div>
        }
        else
        {
            <div class="row g-4">
                @foreach (var product in products)
                {
                    <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                        <div class="card h-100 border-0 shadow-sm product-card hover-scale">
                            <div class="position-relative">
                                <img src="@(string.IsNullOrEmpty(product.Base64Image) ? 
                                           (string.IsNullOrEmpty(product.ImagePath) ? "images/no-image.jpg" : product.ImagePath) : 
                                           $"data:image/jpeg;base64,{product.Base64Image}")" 
                                     class="card-img-top" 
                                     style="height: 200px; object-fit: cover;"
                                     alt="@product.ProductName">
                                <div class="product-overlay">
                                    <button class="btn btn-sm btn-outline-light me-2" @onclick="() => AddToFavorites(product.Id)">
                                        <i class="bi bi-heart"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-light" @onclick="() => ShowProductDetails(product.Id)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                </div>
                                @if (product.IsDiscounted)
                                {
                                    <span class="badge bg-danger position-absolute top-0 start-0 m-3">
                                        %@product.DiscountRate İndirim
                                    </span>
                                }
                            </div>
                            <div class="card-body">
                                <h6 class="card-title mb-2">@product.ProductName</h6>
                                <p class="text-muted small mb-2">@(product.Description?.Length > 50 ? product.Description.Substring(0, 47) + "..." : product.Description)</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        @if (product.IsDiscounted)
                                        {
                                            <span class="text-danger fw-bold">@product.DiscountedPrice?.ToString("N2") ₺</span>
                                            <small class="text-muted text-decoration-line-through">@product.Price.ToString("N2") ₺</small>
                                        }
                                        else
                                        {
                                            <span class="fw-bold">@product.Price.ToString("N2") ₺</span>
                                        }
                                    </div>
                                    <div class="d-flex align-items-center">
                                        <small class="text-muted me-2">Stok: @product.StockQuantity</small>
                                        <button class="btn btn-primary btn-sm" @onclick="() => AddToCart(product)">
                                            <i class="bi bi-cart-plus me-1"></i>Sepete Ekle
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

<style>
    .product-card .product-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.2);
        display: flex;
        justify-content: center;
        align-items: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .product-card:hover .product-overlay {
        opacity: 1;
    }

    .hover-scale {
        transition: transform 0.3s ease;
    }
    
    .hover-scale:hover {
        transform: scale(1.05);
    }
</style>

@code {
    [Parameter]
    public string CategoryId { get; set; }

    private Category category;
    private List<Product> products;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            category = await CategoryService.GetCategoryById(CategoryId);
            if (category != null)
            {
                products = await ProductService.GetProductsByCategory(CategoryId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Veriler yüklenirken hata oluştu: {ex.Message}");
        }
    }

    private void AddToFavorites(string productId)
    {
        // Favorilere ekleme işlemi
    }

    private void ShowProductDetails(string productId)
    {
        // Ürün detay sayfasına yönlendirme
    }

    private async Task AddToCart(Product product)
    {
        try
        {
            await CartService.AddToCart(product);
            // İsteğe bağlı: Başarılı mesajı göster
            // await JSRuntime.InvokeVoidAsync("alert", "Ürün sepete eklendi!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ürün sepete eklenirken hata oluştu: {ex.Message}");
            // İsteğe bağlı: Hata mesajı göster
        }
    }
} 