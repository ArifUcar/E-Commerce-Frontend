@using E_Commerce_FrontEnd.Models
@using E_Commerce_FrontEnd.Services
@inject ICartService CartService
@inject IFavoriteService FavoriteService
@inject IJSRuntime JSRuntime

<div class="card h-100 border-0 shadow-sm product-card" @onclick="HandleProductClick">
    <div class="position-relative">
        <img src="@(string.IsNullOrEmpty(Product.Base64Image) ? 
            (string.IsNullOrEmpty(Product.ImagePath) ? "images/no-image.jpg" : Product.ImagePath) : 
            $"data:image/jpeg;base64,{Product.Base64Image}")" 
             class="card-img-top" alt="@Product.ProductName">
        <button class="btn btn-light btn-sm position-absolute top-0 end-0 m-2 rounded-circle p-2"
                @onclick="ToggleFavorite">
            <i class="bi @(IsFavorite ? "bi-heart-fill text-danger" : "bi-heart")"></i>
        </button>
        @if (Product.DiscountedPrice.HasValue && 
            Product.DiscountStartDate <= DateTime.Now && 
            Product.DiscountEndDate >= DateTime.Now)
        {
            <div class="position-absolute top-0 start-0 m-2">
                <span class="badge bg-danger">%@Product.DiscountRate İndirim</span>
            </div>
        }
    </div>
    <div class="card-body d-flex flex-column">
        <h6 class="card-title mb-2">@Product.ProductName</h6>
        <p class="card-text text-muted small mb-2">@Product.Description</p>
        <div class="mt-auto">
            @if (Product.DiscountedPrice.HasValue && 
                Product.DiscountStartDate <= DateTime.Now && 
                Product.DiscountEndDate >= DateTime.Now)
            {
                <div class="d-flex align-items-center gap-2">
                    <span class="text-primary fw-bold">@Product.DiscountedPrice.Value.ToString("N2") ₺</span>
                    <span class="text-decoration-line-through text-muted small">@Product.Price.ToString("N2") ₺</span>
                </div>
            }
            else
            {
                <span class="text-primary fw-bold">@Product.Price.ToString("N2") ₺</span>
            }
        </div>
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <span class="badge bg-@(Product.StockQuantity > 10 ? "success" : "danger")">
                    Stok: @Product.StockQuantity
                </span>
            </div>
        </div>
    </div>
    <div class="card-footer bg-white border-0 d-flex gap-2">
        <button class="btn btn-primary flex-grow-1" 
                @onclick="() => OnProductClick.InvokeAsync(Product)">
            <i class="bi bi-eye me-2"></i>İncele
        </button>
        @if (Product.StockQuantity > 0)
        {
            <button class="btn btn-success" @onclick="AddToCart">
                <i class="bi bi-cart-plus"></i>
            </button>
        }
    </div>
</div>

<style>
    .product-card {
        cursor: pointer;
        transition: transform 0.2s;
    }

    .product-card:hover {
        transform: translateY(-5px);
    }

    .card-img-top {
        height: 200px;
        object-fit: cover;
    }

    .card-title {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .card-text {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }
</style>

@code {
    [Parameter]
    public Product Product { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductClick { get; set; }

    private bool IsFavorite => FavoriteService.IsFavorite(Product.Id);

    private async Task ToggleFavorite()
    {
        if (IsFavorite)
        {
            await FavoriteService.RemoveFromFavorites(Product.Id);
        }
        else
        {
            await FavoriteService.AddToFavorites(Product);
        }
    }

    private async Task AddToCart()
    {
        try
        {
            await CartService.AddToCart(Product);
            await JSRuntime.InvokeVoidAsync("alert", "Ürün sepete eklendi!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private async Task HandleProductClick()
    {
        if (OnProductClick.HasDelegate)
        {
            await OnProductClick.InvokeAsync(Product);
        }
    }
} 